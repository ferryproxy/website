<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on Ferry Proxy</title><link>https://ferryproxy.io/docs/</link><description>Recent content in Docs on Ferry Proxy</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://ferryproxy.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://ferryproxy.io/docs/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/docs/roadmap/</guid><description>Roadmap # This document outlines some goals, non-goals, and future aspirations for Ferry as a project. Engage encryption Use Ferryctl alone to configure service mapping between clusters without the Controller Status is monitored and displayed in the status of the Hub Multi-cluster failover Multi-cluster load balancing IP-based access control Provide an cluster-to-cluster view of traffic flow and service performance Adapting to the ecosystem Support UDP of Service Support mcs api Supports direct UDP p2p connection between two clusters without public IPs Support any server with sshd as a hub without Cluster</description></item><item><title>Control Plane Unreachable</title><link>https://ferryproxy.io/docs/user/examples/control-plane-unreachable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/docs/user/examples/control-plane-unreachable/</guid><description>Control Plane Unreachable # Prepare at least two clusters for demonstration
Can be a cluster of one node or a cluster of Kind but at least two.
Download ferryctl # ferryctl is the installation and operation tool for ferry
A ferryctl needs to be installed for each cluster&amp;rsquo;s control node
https://github.com/ferryproxy/ferry/releases
Initialize Control Plane Cluster # # execute on control plane ferryctl control-plane init --control-plane-reachable=false Join a Data Plane Cluster # 3 steps are required to configure</description></item><item><title>Data Plane Unreachable</title><link>https://ferryproxy.io/docs/user/examples/data-plane-unreachable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/docs/user/examples/data-plane-unreachable/</guid><description>Data Plane Unreachable # Prepare at least two clusters for demonstration
Can be a cluster of one node or a cluster of Kind but at least two.
Download ferryctl # ferryctl is the installation and operation tool for ferry
A ferryctl needs to be installed for each cluster&amp;rsquo;s control node
https://github.com/ferryproxy/ferry/releases
Initialize Control Plane Cluster # # execute on control plane ferryctl control-plane init Join a Data Plane Cluster # 3 steps are required to configure</description></item><item><title>Default Example</title><link>https://ferryproxy.io/docs/user/examples/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/docs/user/examples/default/</guid><description>Default Example # Prepare at least two clusters for demonstration
Can be a cluster of one node or a cluster of Kind but at least two.
Download ferryctl # ferryctl is the installation and operation tool for ferry
A ferryctl needs to be installed for each cluster&amp;rsquo;s control node
https://github.com/ferryproxy/ferry/releases
Initialize Control Plane Cluster # # execute on control plane ferryctl control-plane init Join a Data Plane Cluster # 3 steps are required to configure</description></item><item><title>Forward Local Port to Cluster</title><link>https://ferryproxy.io/docs/user/examples/forward-dial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/docs/user/examples/forward-dial/</guid><description>Forward Local Port to Cluster # Installing Tunnel in the cluster # ferryctl data-plane init Forward Local Port to Cluster # ferryctl local forward dial &amp;lt;local address port&amp;gt; &amp;lt;remote service port&amp;gt; ferryctl local forward dial 0.0.0.0:18080 web-0.test.svc:80 All accesses to port 127.0.0.1:18080 are forwarded to port web-0.test.svc:80
Sample</description></item><item><title>Forward Service to Local Port</title><link>https://ferryproxy.io/docs/user/examples/forward-listen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/docs/user/examples/forward-listen/</guid><description>Forward Service to Local Port # Installing Tunnel in the cluster # ferryctl data-plane init Forward Service to Local Port # ferryctl local forward listen &amp;lt;remote service port&amp;gt; &amp;lt;local address port&amp;gt; ferryctl local forward listen local.test.svc:80 127.0.0.1:28080 All accesses on web-0.test.svc:80 in the cluster are forwarded to the local port 127.0.0.1:28080
Sample</description></item><item><title>Glossary</title><link>https://ferryproxy.io/docs/glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/docs/glossary/</guid><description>Glossary # API server # Also known as:kube-apiserver
The API server is a component of the Kubernetes control plane that exposes the Kubernetes API. The API server is the front end for the Kubernetes control plane
Cluster # A set of worker machines, called nodes, that run containerized applications. Every cluster has at least one worker node.
Controller # In Kubernetes, controllers are control loops that watch the state of your cluster, then make or request changes where needed.</description></item><item><title>Manual Mapping Service</title><link>https://ferryproxy.io/docs/user/examples/manual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/docs/user/examples/manual/</guid><description>Manual Mapping Service # Why this is needed # In some cluster unreachability scenarios, the apiserver address of the data plane needs to be exposed to the control plane in advance so that the control plane can access the apiserver of the data plane.
The routing rules configured by this feature are not controlled by the ferry-controller.
Install Tunnel # ferryctl data-plane init Manual Mapping Service # 3 steps are required to configure</description></item><item><title>Technology Principle</title><link>https://ferryproxy.io/docs/principle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/docs/principle/</guid><description>Technology Principle # Communication and penetration # Ferry-Tunnel uses the capabilities of the ssh protocol for communication and penetration between Ferry-Tunnel
The following capabilities are primarily used
direct-tcpip tcpip-forward direct-streamlocal streamlocal-forward There are two core points
Listen to a local port, connect to the Ferry-Tunnel on the other side, and forward all connections through it Connecting to the peer Ferry-Tunnel and listening to a port, and forwarding connections from the listening port to the local Service Discovery # Each exported service port will be assigned a port in the Ferry-Tunnel of the imported cluster</description></item><item><title>With Service Mesh</title><link>https://ferryproxy.io/docs/user/with-service-mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/docs/user/with-service-mesh/</guid><description>With Service Mesh # As verified in Istio, Ferry fits perfectly as long as Sidecar is not injected into the ferry-tunnel</description></item></channel></rss>