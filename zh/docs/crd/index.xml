<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CRD on Ferry Proxy</title><link>https://ferryproxy.io/zh/docs/crd/</link><description>Recent content in CRD on Ferry Proxy</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://ferryproxy.io/zh/docs/crd/index.xml" rel="self" type="application/rss+xml"/><item><title>Hub</title><link>https://ferryproxy.io/zh/docs/crd/hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/zh/docs/crd/hub/</guid><description>Hub # Hub CR 定义一个 Hub, 是与其他 Hub 通信地址, 现在只支持一个集群, 未来会添加支持任何可能得设备作为 Hub, 甚至是你的笔记本也行
Hub 为 RoutePolicy CR 和 Route CR 提供了计算的依据
apiVersion: traffic.ferryproxy.io/v1alpha2 kind: Hub metadata: name: hub-name namespace: ferry-system spec: gateway: # 表示这个 Hub 是否是可以被连接的 reachable: true # 在 reachable 为 true 时, 其他 Hub 会根据这个地址连接本 Hub address: 1.1.1.1:31087 # 这是一个 Hub 名的列表，本 Hub 需要通过它来到达其他 Hub 使用 # 被 RoutePolicy 用来计算 Route navigationWay: - hubName: hubname # 这是一个 Hub 名的列表，其他 Hub 需要通过它达到本 Hub # 被 RoutePolicy 用来计算 Route receptionWay: - hubName: hubname # 是一个代理的列表，这个 Hub 要到达其他 Hub 必须通过这个代理。 # 当此 Hub 到达其他 Hub 时使用 navigationProxy: - proxy: hubname # 是一个代理的列表，其他 Hub 到达到本 Hub 达必须通过这个代理。 # 当此 Hub 到达其他 Hub 时使用 receptionProxy: - proxy: hubname</description></item><item><title>MCS API</title><link>https://ferryproxy.io/zh/docs/crd/mcs_api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/zh/docs/crd/mcs_api/</guid><description>MCS API # 这是在 kubernetes-sigs/mcs-api 定义的一套 API
Ferry 会从所有 Hub CR 被加上 mcs.traffic.ferryproxy.io/service=enabled label 的集群中 获取其 ServiceExport 和 ServiceImport 的 CR, 将其转换为 RoutePolicy CR, 以此兼容 mcs api</description></item><item><title>Route</title><link>https://ferryproxy.io/zh/docs/crd/route/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/zh/docs/crd/route/</guid><description>Route # Route CR 定义 Hub 之间的单个 Service 的路由规则
apiVersion: traffic.ferryproxy.io/v1alpha2 kind: Route metadata: name: route-name namespace: ferry-system spec: export: hubName: cluster-1 service: namespace: default name: app-1 import: hubName: cluster-0 service: namespace: default name: app-1 示例的 CR 描述了 Hub cluster-1 导出 Service app-1.default, 在 Hub cluster-0 导入它并命名为 app-1.default 导入和导出的 name 和 namespace 不必一样</description></item><item><title>Route Policy</title><link>https://ferryproxy.io/zh/docs/crd/route_policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ferryproxy.io/zh/docs/crd/route_policy/</guid><description>Route Policy # RoutePolicy 是用于定义通用的复合型的路由规则, 最终会转换成 Route CR
明确路由 # 单对单导入 # apiVersion: traffic.ferryproxy.io/v1alpha2 kind: RoutePolicy metadata: name: policy-name namespace: ferry-system spec: exports: - hubName: cluster-1 service: namespace: default name: app-1 imports: - hubName: cluster-0 service: namespace: default name: app-1 这是一个和 Route CR 的示例等价的 CR
从多个 Hub 导入 # apiVersion: traffic.ferryproxy.io/v1alpha2 kind: RoutePolicy metadata: name: policy-name namespace: ferry-system spec: exports: - hubName: cluster-1 service: namespace: default name: app-1 - hubName: cluster-2 service: namespace: default name: app-1 imports: - hubName: cluster-0 service: namespace: default name: app-1 这个路由规则会生成两条 Route CR, 分别是把 Hub cluster-2 和 cluster-2 的 app-1.</description></item></channel></rss>